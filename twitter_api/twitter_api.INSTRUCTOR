1. Make sure everyone knows what Twitter is and what trending topics
are.

2. Run the script, passing the --search option and a search term and
observing the output. An on-topic example:

python twitter.py --search=python

Have the students try a few different search terms.

3. Run the script, passing the --trending-topics option and observing
the output.

4. Look at the search code. Explain what an API is and how we are
using it in the search function.

5. Replace

    for tweet in tweets:
        print tweet.GetText()

with

    for tweet in tweets:
        print type(tweet)
        print tweet

and discuss what each tweet contains. Undo the replacement when you
are done. Talk about what type() does. `tweet` is an instance of
twitter.Status: look at the Status class in the source code at

http://code.google.com/p/python-twitter/source/browse/twitter.py

and match instance variable to what you saw in the output of "print
tweet". Make it clear that they don't have to understand all of this
right now -- we're just getting feel for the code layout and what the
API exposes for us.

Look at the GetText method.

6. Look at the GetUser method in the source code. Explain that there
is a User class the represents all the data that makes up a user, so
to get the Twitter name of a user we'll have to get an instance of the
User class from GetUser, then get the Twitter name from that instance
somehow. Encourage them to look at the source code and see if they can
use the comments and method names to figure out how to get the Twitter
username.

EXERCISE: change search to print the Twitter username of the sender
along with the tweet's text.

7. Walk through the code in trending_topics. Talk about what
GetTrendsCurrent returns.

8. Talk about commandline arguments and why they are useful. Note that
this may be a completely new idea for some Windows users. Talk about
conventions (-s searchterm v. --search=searchterm) and --help. Run the
script with the --help option.

Walk through the code in main, explaining how we get a user-supplied
search term from the commandline to the search function. Explaing
__name__ == "__main__" and the difference between running code as a
script and using it as a module. Make it clear that they don't have to
understand all of this right now, and say that pattern matching is a
fine way to extend code and start understanding how it works.

9. EXERCISE: finish the stubbed user_tweets function. It takes a
Twitter username as a parameter and should print out recent tweets for
that username using the GetUserTimeline function.

Then copy the --search parser logic in main to add a command line
option for user_tweets.
